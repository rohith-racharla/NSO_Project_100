#!/bin/bash

# Function to remove servers
remove_servers() {
    resource_tag=$1
    server_ids=$(openstack server list --name "$resource_tag" -c ID -f value)
    total_servers=$(echo "$server_ids" | wc -l)
    if [ -n "$server_ids" ]; then
        echo "$(date) Total servers: $total_servers"
        echo "$(date) Removing servers..."
        for server_id in $server_ids; do
            openstack server delete $server_id
        done
        echo "$(date) Successfully removed $total_servers servers"
    else
        echo "$(date) No servers found to remove"
    fi
}

# Function to remove floating IPs
remove_floating_ips() {
    floating_ip_ids=$(openstack floating ip list -c ID -f value)
    total_floating_ips=$(echo "$floating_ip_ids" | wc -l)
    if [ -n "$floating_ip_ids" ]; then
        for floating_ip_id in $floating_ip_ids; do
            echo "$(date) Removing floating IP"
            openstack floating ip delete "$floating_ip_id"
        done
        echo "$(date) Successfully removed $total_floating_ips floating IPs"
    else
        echo "$(date) No floating IPs found"
    fi
}

# Function to detach router from subnet
detach_router_from_subnet() {
    router_name=$1
    router_id=$(openstack router list | grep "${router_name}" | awk '{print $2}')
    if [ -n "${router_id}" ]; then
        echo "$(date) Router '${router_name}' found with ID: ${router_id}"
        subnet_id=$(openstack router show "${router_id}" -f json | jq -r '.interfaces_info[].subnet_id')
        openstack router remove subnet "${router_id}" "${subnet_id}"
        echo "$(date) Detached router from subnet"
    else
        echo "$(date) Router '${router_name}' not found"
    fi
}

# Function to remove routers
remove_routers() {
    router_name=$1
    router_id=$(openstack router list | grep -w "${router_name}" | awk '{print $2}')
    if [ -n "${router_id}" ]; then
        echo "$(date) Removing router"
        openstack router delete "${router_id}"
        echo "$(date) Router '${router_name}' removed successfully"
    else
        echo "$(date) Router '${router_name}' not found"
    fi
}

# Function to remove subnets
remove_subnets() {
    subnet_name=$1
    subnet_id=$(openstack subnet list | grep -w "${subnet_name}" | awk '{print $2}')
    if [ -n "${subnet_id}" ]; then
        echo "$(date) Removing subnet"
        openstack subnet delete "${subnet_id}"
        echo "$(date) Subnet '${subnet_name}' removed successfully"
    else
        echo "$(date) Subnet '${subnet_name}' not found"
    fi
}

# Function to remove networks
remove_networks() {
    resource_tag=$1
    network_ids=$(openstack network list --tags "$resource_tag" -c ID -f value)
    if [ -n "$network_ids" ]; then
        for network_id in $network_ids; do
            openstack network delete "$network_id"
        done
        echo "$(date) Removed networks"
    else
        echo "$(date) No networks found"
    fi
}

# Function to remove security groups
remove_security_groups() {
    security_group_name=$1
    openstack security group delete $security_group_name
    echo "$(date) Security group removed"
}

# Function to remove keypairs
remove_keypairs() {
    keypair_name=$1
    keypair_exists=$(openstack keypair show $keypair_name)
    if [ -n "$keypair_exists" ]; then
        echo "$(date) Keypair $keypair_name found"
        openstack keypair delete $keypair_name
        echo "$(date) Keypair $keypair_name removed"
    else
        echo "$(date) Keypair $keypair_name not found"
    fi
}

# Main cleanup script execution
cloud_credentials=$1
resource_tag=$2
ssh_key_file=$3
node_count=3
source "$cloud_credentials"
chmod 600 $ssh_key_file
echo "$(date) Starting cleanup"

# Define resource names based on resource tag
network_name="${resource_tag}_network"
subnet_name="${resource_tag}_subnet"
keypair_name="${resource_tag}_key"
router_name="${resource_tag}_router"
security_group_name="${resource_tag}_securitygroup"
load_balancer1="${resource_tag}_HAproxy"
load_balancer2="${resource_tag}_HAproxy2"
bastion_host="${resource_tag}_bastion"
web_nodes="${resource_tag}_dev"
virtual_ip_port="${resource_tag}_vip"
ssh_config_file="${resource_tag}_config"
known_hosts_file="known_hosts"
inventory_file="hosts"

# Remove existing files
[[ -f "$ssh_config_file" ]] && rm "$ssh_config_file"
[[ -f "$known_hosts_file" ]] && rm "$known_hosts_file"
[[ -f "$inventory_file" ]] && rm "$inventory_file"
[[ -f "floating1" ]] && rm "floating1"
[[ -f "floating2" ]] && rm "floating2"
[[ -f "vipaddr" ]] && rm "vipaddr"
[[ -f "unused" ]] && rm "unused"
[[ -f "node_count.txt" ]] && rm "node_count.txt"

# Execute cleanup functions
remove_servers "$resource_tag"
remove_floating_ips
detach_router_from_subnet "$router_name"
remove_routers "$router_name"
echo "$(date) Removing virtual port"
openstack port delete "$virtual_ip_port"
echo "$(date) Virtual port $virtual_ip_port removed"
remove_subnets "$subnet_name"
remove_networks "$resource_tag"
remove_security_groups "$security_group_name"
remove_keypairs "$keypair_name"
echo "$(date) Cleanup completed successfully"
